[user]
	name = Jon Reeve
[color]
	ui = true
[merge]
	summary = true
[core]
	excludesfile = /home/jon/.gitignore
	attributesfile = /home/jon/.gitattributes
	editor = vim
#	pager = most +s +'/---' # use more as pager and jump to first change, then hitting 'n' will step to next change
[branch]
	autosetuprebase = always # automatically set up new tracked branches to rebase not merge - avoid merge commits!
[alias]
        unstage = reset HEAD
        unadd = reset HEAD
        ls = ls-files
        co = checkout
        lol = log --graph --decorate --pretty=oneline --abbrev-commit
        lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
        lg = log --graph --all --format=format:'%C(bold blue)%h%C(reset) %C(bold green)(%ar)%C(reset) %C(bold yellow)%d%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)' --abbrev-commit --date=relative
        lg2 = log --graph --all --format=format:'%C(bold blue)%h%C(reset) %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n'' %C(white)%s%C(reset) %C(bold white)— %an%C(reset)' --abbrev-commit
        overview = log --graph --simplify-by-decoration --decorate --all --pretty=format:'%cd%Cgreen%d %Cblue%h %Creset%s' --date=short
        up = pull origin
        st = status
        stat = status
        df = diff
        d = diff
        ct = commit
        c = commit
        cp = cherry-pick
        br = branch
        s = stash
        pr = pull --rebase # avoid merge commits, because pull merging by default usually sucks
        pp = "!f() { git pull --rebase $1 && git push $1; }; f" # avoid merge commits - pull rebase then push if it was all ok
        mf = merge --ff-only # avoid merge commits - use this instead of merge. If I check out master, pull down changes that aren't in the feature branch, and then merge the feature, I might get a merge commit, if I don't use this
        addi = add --interactive
        ai = add --interactive
        undocommit = reset --soft HEAD^
        undelete = "!f() { git reset HEAD \"$1\" && git checkout \"$1\"; }; f" # unadd and checkout a file

        #### gerrit
        # gpush = "!f() { git push $1 $2:refs/for/$2; }; f" # gerrit push
        #### git svn
        # svnup = "!f() { git svn fetch && git svn rebase; }; f" # svn fetch and rebase in one :)
        # svncommit = "!f() { git svnup && git svn dcommit; }; f" # svn update then commit if all went well
        # svnrev = "!f(){ git checkout $(git log --pretty=oneline --grep "@$1" | cut -d' ' -f1); }; f" # checkout an svn revision

[push]
	default = simple
[diff "exif"]
	textconv = exiftool
[diff "word"]
	textconv = strings
